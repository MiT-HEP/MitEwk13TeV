MitEwk/Efficiency/README.txt - Jay Lawhorn 8/7/13

------| INTRODUCTION |------

This module calculates lepton efficiencies based on a tag and probe system set up in the ntuples produced by EWKAna/Selection. 
The TagAndProbe subfolder comes with its own README from Kevin on its general use. This document comments on its use in this
particular set up.

------| PROBE SORTING |------

The first step of the efficiency calculation is performed by runSelectProbes.sh which is a shell wrapper for selectProbesEleEff.C
and selectProbesMuEff.C. The relevant efficiency sorts should be done for both data and signal MC.
The options for each are detailed below.

* selectProbesEleEff.C+\(\"input_file\",\"output_dir\",eff_type, do_gen_match, do_weighted\)

    input_file specifies the input ntuple 

    output_dir specifies output directory

    eff_type takes values in {0,1,2,3} where 0 = HLT, 1 = Selection, 2 = GSF reco, 3 = GSF reco +  Selection
    ( HLT * GsfSel was used in prior analysis )

    do_gen_match takes 0 or 1. for data, use 0. for MC, use 1.

    do_weighted takes 0 or 1. it defaults to 0 and that's fine to use

* selectProbesMuEff.C+\(\"input_file\",\"output_dir\",eff_type, do_gen_match, do_weighted\)

    input_file specifies the input ntuple 

    output_dir specifies output directory

    eff_type takes values in {0,1,2,3,4,5,6} where 0 = HLT, 1 = Selection, 2 = tracker track reco, 
    3 = standalone muon reco (in muon system), 4 = standalone muon reco + iso requirement, 5 = POGID,
    6 = POGID + iso requirement
    ( HLT * Trk * Sta * Sel was used in prior analysis )

    do_gen_match takes 0 or 1. for data, use 0. for MC, use 1.

    do_weighted takes 0 or 1. it defaults to 0 and that's fine to use


------| EFFICIENCY BINNING AND CALCULATIONS |------

The README in the TagAndProbe extensively covers the general use of this module, so it's recommended you start there. This module is designed to compute various efficiencies
in bins of kinematic variables (pT, eta, npv, etc) and runs on files of the format generated by the probe sorting code detailed above. runEleEff.sh and runMuEff.sh
are wrappers for plotEff.C that make all of the needed calculations for this particular analysis. The options for plotEff.C are given briefly below:

* plotEff.C+\(\"bins_file.bins\",pass_signal_model,pass_bkg_model,fail_signal_model,fail_bkg_model,\"input_file\",\"output_dir\",\"format\",do_abs_eta,do_pu,charge,mc_file_name,run_num_lo,run_num_hi\)

    bins_file.bins is the location of the binning file (see TagAndProbe/README for more info and NOTE: empty lines in your .bins file will make everything crash)

    pass_signal_model takes values from 0-4. 0 = probe counting, 1 = BW conv. with CB fxn, 2 = MC template conv. with gaussian,
    3 = "Voigtian" shape, 4 = unbinned MC data conv. with gaussian

    pass_bkg_model takes values from 0-5. 0 = no background, 1 = exponential, 2 = erfc*exp, 3 = double exponential, 4 = linear*exp, 5 = quadratic*exp

    fail_signal_model takes same arguments as pass_signal_model

    fail_bkg_model takes same arguments as pass_bkg_model

    input_file is the location of the reduced flat tree prodcued by the probe sorting code

    output_dir is where the results will be written to

    format is the image format for saving the plots (png is a good choice :p)

    do_abs_eta takes 0 for not binning in absolute eta and 1 for binning in absolute eta

    do_pu takes 0 for no pileup reweighting and 1 for applying pileup reweighting

    charge gives a charge requirement if so desired (-1, 0, 1)

    mc_file_name gives the location of a mc file for making fit templates

    run_num_lo and run_num_hi can be given to limit the efficiency calculations to a specific range of run numbers

* previous analysis used probe counting for all MC efficiencies and data trigger efficiencies
  all other data efficiencies use MC convolved with a gaussian for signal and gaussian for background

------| MODIFICATION |------

* in selectProbes()Eff.C:
    final selection pT threshold is set near the top of both files

* in TagAndProbe/().bins:
    kinematic bins are most likely going to need fiddling, they're defined here

* in TagAndProbe/plotEff.C:
    pileup reweighting files are give near line 155

